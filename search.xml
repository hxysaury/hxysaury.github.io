<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell基础知识</title>
      <link href="/2025/02/24/shell/shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/02/24/shell/shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="shell三种括号"><a href="#shell三种括号" class="headerlink" title="shell三种括号"></a>shell三种括号</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">()：小括号涉及一个父shell和子shell的概念，在小括号里的内容都属于子shell，两个小括号可以进行数字运算</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&#125;：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建连续的文件</p><p>快速备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]：里面字符里的任意一个</span><br></pre></td></tr></table></figure><h1 id="shell三种引号"><a href="#shell三种引号" class="headerlink" title="shell三种引号"></a>shell三种引号</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>　＃不解析，不转义</span><br><span class="line"><span class="string">&quot;&quot;</span>　＃解析转义</span><br><span class="line">`` 　<span class="comment">#解析转义，引用命令  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $()  和`` 反引号的作用是一样的</span></span><br></pre></td></tr></table></figure><p>上图可见一般不带引号跟双引号的效果一样的。</p><p>反引号用来引用命令。</p><p>$() 和反引号的效果一样</p><h1 id="追加-重定向-管道"><a href="#追加-重定向-管道" class="headerlink" title="追加-重定向-管道"></a>追加-重定向-管道</h1><p><strong>重定向：</strong></p><ul><li><code>&gt;</code> 输出 ，文件不存在会自动创建 ，如果文件存在且有内容，会先清空文件内容，在重定向到文件内</li></ul><ul><li><code>&gt;&gt;</code> 追加输出， 追加到文件末尾</li></ul><ul><li><code>&lt;</code> 输入，</li></ul><p><strong>管道：</strong></p><blockquote><p>把管道前面命令的标准输出当作管道后面的标准输入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:标准输入</span><br><span class="line">1:标准输出</span><br><span class="line">2: 标准错误输出</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> history.txt | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>| <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c| <span class="built_in">sort</span> -nr</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="别名简单介绍"><a href="#别名简单介绍" class="headerlink" title="别名简单介绍"></a>别名简单介绍</h1><p>alias </p><p>要想永久有效，需要写进<code>.bashrc</code>，<code>source ~/.bashrc</code>生效</p><h1 id="终端录制工具"><a href="#终端录制工具" class="headerlink" title="终端录制工具"></a>终端录制工具</h1><p>录制：<code>script -a acction.log -t 2&gt; time.log</code></p><p>回放：<code>scriptreplay  time.log  acction.log</code></p><h1 id="shell中算数计算工具"><a href="#shell中算数计算工具" class="headerlink" title="shell中算数计算工具"></a>shell中算数计算工具</h1><ul><li>expr</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> 1+2</span><br></pre></td></tr></table></figure><ul><li>let</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="built_in">let</span> a=a+1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure><ul><li>$(())</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((<span class="number">1</span>+<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>bc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1+2|bc</span><br></pre></td></tr></table></figure><h1 id="产生伪随机数方法"><a href="#产生伪随机数方法" class="headerlink" title="产生伪随机数方法"></a>产生伪随机数方法</h1><ul><li>0-9</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((<span class="variable">$RANDOM</span>%<span class="number">10</span>))</span><br></pre></td></tr></table></figure><ul><li>1-10</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((<span class="variable">$RANDOM</span>%<span class="number">10</span>+<span class="number">1</span>))</span><br></pre></td></tr></table></figure><ul><li>配合cut制作随机6位密码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span> | <span class="built_in">md5sum</span>| <span class="built_in">cut</span> -c 1-6</span><br></pre></td></tr></table></figure><h1 id="任务终止与前后台执行命令"><a href="#任务终止与前后台执行命令" class="headerlink" title="任务终止与前后台执行命令"></a>任务终止与前后台执行命令</h1><p>fg：放到前台来执行 </p><p>bg ：放到后台执行</p><p>jobs：查看有多少任务 </p><p>Ctrl+z：暂停执行</p><p>Ctrl+c：取消执行</p><p>如果在使用vim写脚本的时候，按了ctrl+z，可以直接使用fg在打开刚才的vim窗口</p><h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><p>内置变量都是大写的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$BASH_VERSION</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PS1</span></span><br></pre></td></tr></table></figure><p><code>$?</code>：如果上一个命令成功执行，那么<code>$?</code>的结果就是0，如果没有成功，那么结果就是非0的任意一个数</p><h1 id="利用cat写入文件"><a href="#利用cat写入文件" class="headerlink" title="利用cat写入文件"></a>利用cat写入文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bypass@bypass:/tmp$ <span class="built_in">cat</span> &gt;&gt; pwd.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&gt; Hello World</span></span><br><span class="line"><span class="string">&gt; Hello Neovim</span></span><br><span class="line"><span class="string">&gt; Hello Golang</span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br></pre></td></tr></table></figure><h1 id="shell中利用sort、uniq统计行数"><a href="#shell中利用sort、uniq统计行数" class="headerlink" title="shell中利用sort、uniq统计行数"></a>shell中利用sort、uniq统计行数</h1><p>统计有多少行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> access.log | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p>统计有多少重复行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt | <span class="built_in">sort</span>|<span class="built_in">uniq</span> -c</span><br></pre></td></tr></table></figure><p>统计有多少重复行，从大到小排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt | <span class="built_in">sort</span>|<span class="built_in">uniq</span> -c| <span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure><p>统计111有多少个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span>| grep ^111$|<span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># tr 把空格替换回车 然后grep ^开始 $结尾，统计个数</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt| grep -o 111</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/24/hello-world/"/>
      <url>/2025/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VIM使用</title>
      <link href="/2025/02/23/shell/vim%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/02/23/shell/vim%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="初识VIM"><a href="#初识VIM" class="headerlink" title="初识VIM"></a>初识VIM</h1><h2 id="1-vim-模式"><a href="#1-vim-模式" class="headerlink" title="1. vim 模式"></a>1. vim 模式</h2><p>主要的 4 种模式： </p><ul><li>Normal 模式：默认进⼊的模式，也是最常⽤的模式 </li><li>Insert 模式：插⼊模式，像正常的⽂本编辑器⼀样输⼊ </li><li>Command 模式：命令模式，在底部输⼊命令 </li><li>Visual 模式：可视模式，对⽂本进⾏选择</li></ul><h2 id="2-Normal-模式：基本移动"><a href="#2-Normal-模式：基本移动" class="headerlink" title="2. Normal 模式：基本移动"></a>2. Normal 模式：基本移动</h2><ul><li><code>hjkl</code> ：上下左右 </li><li><code>gg</code> ：跳到第⼀⾏（类似 Home 键） </li><li><code>G</code> ：跳到最后⼀⾏（类似 End 键）</li><li><code>&lt;Ctrl-u&gt;/&lt;Ctrl-b&gt;</code> ：往上翻半⻚&#x2F;⼀⻚（类似 PageUp 键） </li><li><code>&lt;Ctrl-d&gt;/&lt;Ctrl-f&gt;</code> ：往下翻半⻚&#x2F;⼀⻚（类似 PageDown 键） </li><li><code>&#123;lineno&#125;gg</code> ：跳到第 lineno ⾏ </li><li><code>zz / zt / zb</code> ：光标⾏设置为 屏幕居中&#x2F;屏幕第⼀⾏&#x2F;屏幕最后⼀⾏</li></ul><h2 id="3-进⼊-Insert-模式"><a href="#3-进⼊-Insert-模式" class="headerlink" title="3. 进⼊ Insert 模式"></a>3. 进⼊ Insert 模式</h2><p>Normal 模式下通过特定命令进⼊ Insert 模式</p><ul><li><code>i</code> ：代表insert ，当前光标之前开始输⼊ </li><li><code>a</code> ：代表append ，当前光标之后开始输⼊ </li><li><code>o</code> ：下⽅插⼊新的⼀⾏，然后开始输⼊ </li><li><code>s</code> ：删除当前光标的字符，然后开始输⼊ </li><li><code>I</code> ：在本⾏的开头开始输⼊ </li><li><code>A</code> ：在本⾏的末尾开始输⼊ </li><li><code>O</code> ：上⽅插⼊新的⼀⾏，然后开始输⼊ </li><li><code>S</code> ：删除当前⾏，然后开始输⼊</li></ul><p>Tips：⼤写字⺟和⼩写字⺟的操作存在关联，可以⼀起记忆</p><h2 id="4-进⼊-Command-模式"><a href="#4-进⼊-Command-模式" class="headerlink" title="4. 进⼊ Command 模式"></a>4. 进⼊ Command 模式</h2><p>Normal 模式下输⼊ <code>:</code> 进⼊ Command 模式</p><ul><li><code>:w</code>：保存当前⽂件 </li><li><code>:q</code> ：退出 </li><li><code>:q!</code> ：放弃当前更改，然后退出 </li><li><code>:wq</code> ：保存当前更改，然后退出 </li><li><code>:h &#123;command&#125;</code> ：显示关于命令的帮助</li></ul><p><code>&lt;Esc&gt;</code>回到 Normal 模式</p><h2 id="5-进⼊-Visual-模式"><a href="#5-进⼊-Visual-模式" class="headerlink" title="5. 进⼊ Visual 模式"></a>5. 进⼊ Visual 模式</h2><ul><li>Normal 模式下按 <code>v</code> 进⼊可视模式 </li><li>进⼊可视模式后可以⽤ Normal 模式下的移动命令选择⽂本 </li><li>可视模式下 <code>x</code> &#x2F;<code>y</code> ：剪切&#x2F;复制；回到 Normal 模式下 <code>p</code> ：粘贴 </li><li>Normal 模式下按 <code>V</code> 进⼊⾏可视模式，⼀次选中⼀整⾏，在需要选中多⾏时很⽅便 </li><li><code>&lt;Esc&gt;</code>回到 Normal 模式</li></ul><h2 id="6-与其他文本编辑软件的对比"><a href="#6-与其他文本编辑软件的对比" class="headerlink" title="6. 与其他文本编辑软件的对比"></a>6. 与其他文本编辑软件的对比</h2><table><thead><tr><th>操作</th><th>其他⽂本编辑软件</th><th>Vim 命令</th></tr></thead><tbody><tr><td>光标移动</td><td>上下左右⽅向键</td><td><code>hjkl</code></td></tr><tr><td>⽂件⾸尾</td><td><code>Home</code> ，<code> End</code></td><td><code>gg</code> ，<code> G</code></td></tr><tr><td>翻⻚</td><td><code>PageUp</code> ， <code>PageDown</code></td><td><code>&lt;Ctrl-u&gt;</code>，<code> &lt;Ctrl-d &gt;</code></td></tr><tr><td>剪切</td><td>选中后<code>&lt;Ctrl+x&gt;</code></td><td>选中后<code>x</code></td></tr><tr><td>复制</td><td>选中后<code>&lt;Ctrl+c&gt;</code></td><td>选中后<code>y</code></td></tr><tr><td>粘贴</td><td><code>&lt;Ctrl+v&gt;</code></td><td><code>p</code></td></tr></tbody></table><h1 id="移动与编辑"><a href="#移动与编辑" class="headerlink" title="移动与编辑"></a>移动与编辑</h1><h2 id="1-基于单词的移动"><a href="#1-基于单词的移动" class="headerlink" title="1. 基于单词的移动"></a>1. 基于单词的移动</h2><p>简单的 <code>hjkl</code> 显然⽆法满⾜我们的需</p><ul><li><code>w</code> ：代表“word” ，跳转到下⼀处单词的开头</li><li><code>b</code> ：代表“back” ，跳转到上⼀处单词的开头 </li><li><code>e</code> ：代表“end” ，跳转到下⼀处单词的结尾</li><li><code>ge</code> ： e 的反向版本，跳转到上⼀处单词的结尾</li></ul><p><code>wbe</code> ⼤写版本 <code>WBE</code> 对应的单词是连续的⾮空字符</p><h2 id="2-基于搜索的移动"><a href="#2-基于搜索的移动" class="headerlink" title="2. 基于搜索的移动"></a>2. 基于搜索的移动</h2><p><strong>⾏内搜索：</strong></p><ul><li><code>f&#123;char&#125;</code> &#x2F; <code>t&#123;char&#125;</code> ：跳转到本⾏下⼀个 <code>char</code> 字符出现处&#x2F;出现前 </li><li><code>;</code> &#x2F; <code>,</code> ：快速向后&#x2F;向前重复 <code>ft</code> 查找 </li><li><code>F&#123;char&#125;</code> &#x2F; <code>T&#123;char&#125;</code> ：往前搜索⽽⾮往后</li></ul><p><strong>⽂件中搜索：</strong></p><ul><li><code>/&#123;pattern&#125;</code> ：跳转到本⽂件中下⼀个 <code>pattern</code> 出现的地⽅ </li><li><code>?&#123;pattern&#125;</code> ：跳转到本⽂件中上⼀个 <code>pattern</code> 出现的地⽅ </li><li><code>pattern</code> 可以是正则表达式 </li><li><code>*</code> ：等价于 <code>/&#123;pattern&#125;</code> ， <code>pattern</code> 是当前光标下的单词 </li><li><code>nN</code> ：快速重复 <code>/</code> 查找</li></ul><h2 id="3-基于标记的移动"><a href="#3-基于标记的移动" class="headerlink" title="3. 基于标记的移动"></a>3. 基于标记的移动</h2><ul><li><code>m&#123;mark&#125;</code> ：把当前位置标记为 mark</li><li>`<code>&#123;mark&#125;</code>： 跳转到名为 mark 的标记位置</li></ul><p><code>mark</code> 是 <code>a-z</code> 的任意字符<br>常⽤场景：当需要临时离开当前光标处，做⼀些事情后再<strong>快速地</strong>回来</p><p>我⽐较习惯⽤的标记是 <code>mm</code></p><p>内置标记：</p><ul><li>`` ：上次跳转前的位置 </li><li>`. ：上次修改的位置 </li><li>`^ ：上次插⼊的位置</li></ul><h2 id="4-其它实⽤的跳转"><a href="#4-其它实⽤的跳转" class="headerlink" title="4. 其它实⽤的跳转"></a>4. 其它实⽤的跳转</h2><ul><li><code>^</code> &#x2F; <code>$</code> ：跳转到本⾏的开始&#x2F;结尾</li><li><code>%</code> ：跳到匹配的配对符（括号等）处</li></ul><h2 id="5-Operator-Motion-Action"><a href="#5-Operator-Motion-Action" class="headerlink" title="5. Operator+Motion&#x3D;Action"></a>5. Operator+Motion&#x3D;Action</h2><p><code>&#123;operator&#125;&#123;motion&#125;</code> ：⼀次编辑动作</p><p>常见操作符：</p><ul><li><code>c</code> ：代表“change” ，修改，删除内容 并进⼊插⼊模式 </li><li><code>d</code> ：代表“delete” ，删除 </li><li><code>y</code> ：代表“yank” ，复制 </li><li><code>v</code> ：代表“visual” ，选中⽂本，进⼊可 视模式</li></ul><p>v<br><strong>例子</strong>：</p><ul><li><code>dgg</code> ：删除到第⼀⾏ </li><li><code>ye</code> ：复制到单词结尾 </li><li><code>d$</code> ：删除到⾏尾 </li><li><code>dt;</code> ：删除直到分号为⽌的内容 “操作符+移动” 是⾮常重要的操作逻辑，他 允许你组合出各种动作</li></ul><p>⼤部分操作符连续按两次（ cc&#x2F;dd&#x2F;yy ）：将其作⽤在这⼀⾏上</p><ul><li><code>dd</code> ：删除这⼀⾏</li></ul><h2 id="6-重复操作：-命令"><a href="#6-重复操作：-命令" class="headerlink" title="6. 重复操作： . 命令"></a>6. 重复操作： . 命令</h2><ul><li><code>.</code> ：重复上⼀次修改 </li><li><code>u</code> ：撤销上⼀次修改 </li><li><code>&lt;Ctrl-r&gt;</code>：重做上⼀次修改</li></ul><p><code>.</code> 命令⾮常适合⽤于需要多次重复某⼀个修改动作的场景<br>省去了重复输⼊命令，⼤⼤提⾼效率</p><h2 id="7-批量操作：数字-动作"><a href="#7-批量操作：数字-动作" class="headerlink" title="7. 批量操作：数字+动作"></a>7. 批量操作：数字+动作</h2><p><code>&#123;count&#125;&#123;action&#125;</code> ：重复 <code>count</code> 次 <code>action</code> 动作</p><p>动作可以是移动动作或是编辑动作</p><ul><li><p><code>4j</code> ：向下移动 4 ⾏ </p></li><li><p><code>3dw</code> ：删除 3 个单词 </p></li><li><p><code>2yy</code> ：复制 2 ⾏ </p></li><li><p><code>4p</code> ：粘贴 4 次<br>数字+动作，是⼀种重要的批量操作⽅式，命令直观，语义明确</p></li><li><p><code>.</code>命令可以直观地看到每⼀次的变化，在合适的时候停⽌</p></li><li><p>数字+动作则需要预先知道动作的次数</p></li></ul><h2 id="8-技巧：使⽤相对⾏号确定移动范围"><a href="#8-技巧：使⽤相对⾏号确定移动范围" class="headerlink" title="8. 技巧：使⽤相对⾏号确定移动范围"></a>8. 技巧：使⽤相对⾏号确定移动范围</h2><p>当涉及⾏操作时，使⽤相对⾏号能够更直观地确定范围</p><ul><li><code>:set relativenumber</code> ：开启 </li><li><code>:set norelativenumber</code> ：关闭</li></ul><h1 id="⽂本对象操作"><a href="#⽂本对象操作" class="headerlink" title="⽂本对象操作"></a>⽂本对象操作</h1><h2 id="1-⽂本对象操作"><a href="#1-⽂本对象操作" class="headerlink" title="1. ⽂本对象操作"></a>1. ⽂本对象操作</h2><p><code>textobjects</code> ：语义化的⽂本⽚段<br>格式：<code>i</code> &#x2F; <code>a</code> + 对象</p><p>常⻅的对象：</p><ul><li><code>w</code> &#x2F;<code>W</code> ， <code>s</code> ， <code>p</code> ：单词、句⼦、段落 </li><li><code>( / )</code> ， <code>[ / ]</code> ， <code>&#123; / &#125;</code> ， <code>&lt; / &gt;</code> ， <code>&#39; / &quot;</code> ：配对符定义的对象</li></ul><p><code>i</code> 代表”inner” ，内部； <code>a</code> 代表 “a” ，额外包括周围的空格或配对符</p><h2 id="2-⽂本对象操作：例⼦"><a href="#2-⽂本对象操作：例⼦" class="headerlink" title="2. ⽂本对象操作：例⼦"></a>2. ⽂本对象操作：例⼦</h2><p>⽂本对象提供了为⽂本赋予了<strong>结构化</strong>的含义，允许我们<strong>以⼀个语义对象作为操作单元</strong> <code>[count]&#123;operator&#125;&#123;textobjects&#125;</code></p><ul><li><code>diw</code> ：删除⼀个单词 </li><li><code>ci(</code> ：修改⼩括号内部 </li><li><code>yi&#123;</code> ：复制⼤括号内部<br>通过组合 <code>operator</code> 与 <code>textobjects</code> ，可以对不同的语义对象实施不同的操作，不仅 ⼗分灵活，⽽且语义明确，容易记忆</li></ul><p>配合<code>.</code> 命令或 <code>[count]</code> 可以简单地完成多次对特定语义对象的操作</p><h2 id="3-textobjects-VS-motion"><a href="#3-textobjects-VS-motion" class="headerlink" title="3. textobjects VS motion"></a>3. textobjects VS motion</h2><p><code>&#123;operator&#125;&#123;motion&#125;</code> 与 <code>&#123;operator&#125;&#123;textobjects&#125; </code></p><p>解耦了操作与操作的对象，⼤⼤提升了操作效率 </p><ul><li><code>motion</code> 是能够移动光标的命令，可以独⽴使⽤（如 <code>wbe</code>） </li><li>⽂本对象只能跟在 <code>operator</code> 后⾯，不能独⽴使⽤（如 <code>iw</code> ） </li><li><code>motion</code> 通过光标的移动确定 <code>operator</code> 的作⽤范围，范围更加灵活但不够明确 </li><li><code>textobjects</code> 则是显式地指定操作的对象，范围明确</li></ul><h2 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h2><p><code>&#123;operator&#125;&#123;motion&#125;</code> 与 <code>&#123;operator&#125;&#123;textobjects&#125;</code></p><p>可以通过⾃定义<code>operator</code> 、 <code>motion</code> 、 <code>textobjects</code> 进⾏扩展，实现更强⼤的操作 </p><ul><li>vim-easymotion：扩展 <code>motion</code> ，更强⼤的跳转功能 </li><li>vim-surround：定义了添加配对符（括号、引号等）的 <code>operator</code> </li><li>vim-commentary：定义了添加注释的 <code>operator</code> </li><li>targets.vim：扩展 <code>textobjects</code> ，定义了新的⽂本对象，如函数参数等</li></ul><h2 id="5-操作符与命令补充"><a href="#5-操作符与命令补充" class="headerlink" title="5. 操作符与命令补充"></a>5. 操作符与命令补充</h2><ul><li><code>gu</code> &#x2F; <code>gU</code>&#x2F; <code>g~</code> ：操作符，转⼩写&#x2F;转⼤写&#x2F;翻转⼤⼩写 </li><li><code>J</code> ：join，连接两⾏ </li><li><code>&lt;Ctrl-a&gt;</code> &#x2F; <code>&lt;Ctrl-x&gt;</code>：增加数字&#x2F;减少数字 </li><li><code>g&lt;Ctrl-A&gt;</code> ：创建递增序列 </li><li><code>&lt;</code> &#x2F;<code>&gt;</code> ：左&#x2F;右缩进</li></ul><h2 id="6-建议：让你的命令更模块化"><a href="#6-建议：让你的命令更模块化" class="headerlink" title="6. 建议：让你的命令更模块化"></a>6. 建议：让你的命令更模块化</h2><p>尽量使你的命令更模块化，具有清晰的含义与作⽤范围，以便于与 <code>.</code> 等命令协同<br>例如： <code>daw</code> ⽐ <code>dw</code> 具有更清晰的语义，也更模块化</p><h2 id="7-练习技巧：⽤-v-先可视化修改的范围"><a href="#7-练习技巧：⽤-v-先可视化修改的范围" class="headerlink" title="7. 练习技巧：⽤ v 先可视化修改的范围"></a>7. 练习技巧：⽤ v 先可视化修改的范围</h2><p>⼀开始不熟练时，可能不确定 <code>motion</code> 或 <code>textobjects</code>具体覆盖了哪部分⽂本 可以先⽤<br><code>v&#123;motion&#125;</code> &#x2F; <code>v&#123;textobjects&#125;</code> 将范围选中，再执⾏ <code>c</code> &#x2F; <code>d</code> &#x2F; <code>y</code> 等操作 但是，当熟练掌握<br>后，尽可能直接使⽤完整的命令进⾏操作，因为相⽐于 <code>viwd</code> ， <code>diw</code> 更加模块化，也更容<br>易进⾏重复操作</p><h1 id="寄存器与宏"><a href="#寄存器与宏" class="headerlink" title="寄存器与宏"></a>寄存器与宏</h1><h2 id="1-寄存器"><a href="#1-寄存器" class="headerlink" title="1. 寄存器"></a>1. 寄存器</h2><p>Vim 提供了许多寄存器⽤于存放内容，可以理解为剪贴板 ⼀个字符对应⼀个寄存器（如 <code>a- z</code> ， <code>0-9</code> ）</p><p>特别的寄存器：</p><ul><li><code>&quot;</code> ：默认寄存器，平时复制、删除的内容都放在⾥⾯ </li><li><code>%</code> ：当前⽂件名 </li><li><code>.</code> ：上⼀次插⼊的内容 </li><li><code>:</code> ：上⼀次执⾏的命令<br>通过 <code>:reg &#123;register&#125;</code> 查看对应寄存器中的内容</li></ul><h2 id="2-指定寄存器"><a href="#2-指定寄存器" class="headerlink" title="2. 指定寄存器"></a>2. 指定寄存器</h2><p>在复制&#x2F;删除&#x2F;粘贴等操作前加上 <code>&quot;&#123;register&#125;</code> 就可以指定本次操作所⽤的寄存器 只要涉及<br>寄存器操作的都可以这样指定</p><ul><li><code>&quot;ayy</code>：将这⼀⾏复制到 a 寄存器中 </li><li><code>&quot;bdiw</code> ：将单词删除，保存到 b 寄存器中 </li><li><code>&quot;cp</code> ：将 c 寄存器中的内容粘贴出来</li></ul><p>常⻅⽤途：将想要<strong>持久保存</strong>的⽂本放到特定寄存器⾥，随时进⾏粘贴，避免被覆盖 寄存器字<br>符⼤写：添加（<strong>append</strong>）⽽⾮覆盖</p><h2 id="3-宏"><a href="#3-宏" class="headerlink" title="3. 宏"></a>3. 宏</h2><p>宏（Macro）：录制⼀系列键盘操作，并允许我们重放这些操作 操作序列存储在指定的寄存器中</p><ul><li><code>q&#123;register&#125;</code> ：开始录制宏，存在寄存器 <code>register</code> 中 </li><li>录制过程中按 <code>q</code> 退出录制 </li><li><code>@&#123;register&#125;</code> ：重放寄存器 <code>register</code> 中的操作 </li><li><code>@@</code> ：重放上⼀次宏操作</li></ul><p>常⻅⽤法： <code>q&#123;register&#125;</code> 录制⼀段操作， <code>@&#123;register&#125;</code> 重放，然后⼀直<code>@@</code> 重放</p><blockquote><p>注意： . 命令对宏不⽣效， . 命令只记录上⼀次修改，⽽宏可能包含多次修改</p></blockquote><h2 id="4-建议：让你的宏对连续重放友好"><a href="#4-建议：让你的宏对连续重放友好" class="headerlink" title="4. 建议：让你的宏对连续重放友好"></a>4. 建议：让你的宏对连续重放友好</h2><ol><li>让你的光标移动更加 general </li><li>假设你要在多个特定的位置进⾏特定的操作，⼀个好的习惯是在宏录制的最后，跳 转到下⼀个需要编辑的位置 </li><li>即，宏包括 【编辑动作】+【跳转到下⼀个需要编辑的位置】 </li><li>这样⼀来，连续重放就可以实现对所有需要编辑的位置进⾏编辑操作</li></ol><p>通过⼤写的寄存器，在宏的后⾯添加命令 如果宏是重放友好的，允许我们使⽤ <code>[count]@&#123;register&#125;</code> 直接重放 <code>count</code> 次</p><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>前⾯的教程⼤多集中在 Normal 模式<br>命令模式提供了除了 Normal 模式的编辑⽅式<br>命令模式的操作对象以“⾏”为基本单位<br>normal 和 global 命令提供强⼤的批量⾏操作</p><h2 id="1-Ex-命令格式"><a href="#1-Ex-命令格式" class="headerlink" title="1. Ex 命令格式"></a>1. Ex 命令格式</h2><p><code>:[range] &#123;excommand&#125; [args]</code></p><ul><li><code>range</code> ：作⽤的范围，不给的话默认是本⾏ </li><li><code>excommand</code>：特殊的命令，适⽤于 Command 模式 </li><li><code>args</code> ：后续的参数，视命令⽽定</li></ul><p>⼀些 Ex Command（ <code>[x]</code> 为寄存器，是可选项）： </p><ul><li><code>:[range] delete [x]</code> ：删除 <code>range</code>中的⾏（到寄存器 <code>x</code> ）， <code>delete</code> 可简写为 <code>d</code> </li><li><code>:[range] yank [x]</code> ：复制 <code>range</code> 中的⾏（到寄存器 <code>x</code> ）， <code>yank</code> 可简写为 &#96;y </li><li><code>:[range] print</code> ：将 <code>range</code> 中⾏打印出来， <code>print</code> 可简写为 <code>p</code></li></ul><h2 id="2-range-与-address-：指定范围"><a href="#2-range-与-address-：指定范围" class="headerlink" title="2. range 与 address ：指定范围"></a>2. range 与 address ：指定范围</h2><p><code>range</code> 由⼀个或两个 <code>address</code> 构成，即 <code>&#123;address&#125;</code> 或 <code>&#123;address&#125;,&#123;address&#125;</code></p><p><code>address</code> 可以是：</p><ul><li><code>&#123;lineno&#125;</code> ：⾏号，如 <code>3</code> 代表第三⾏（0 代表第⼀⾏上⾯的虚拟⾏） </li><li><code>$</code> ：最后⼀⾏ </li><li><code>.</code> ：光标所在⾏ </li><li><code>/&#123;pattern&#125;/</code> ：下⼀个<code>pattern</code> 所在的⾏</li></ul><p><code>address</code> 可以做加减法， <code>.+3</code> 代表光标往下第三⾏， <code>$-3</code> 代表倒数第 4 ⾏</p><h2 id="3-address-组合成-range"><a href="#3-address-组合成-range" class="headerlink" title="3. address 组合成 range"></a>3. address 组合成 range</h2><p><code>address</code> 组合出 <code>range</code> （可以混⽤）：</p><ul><li><code>1, 3</code> ：⽂件的 1-3 ⾏ </li><li><code>., .+4</code>：当前-当前往下 4 ⾏（共 5 ⾏） </li><li><code>$-3, $</code> ：⽂件的最后 4 ⾏</li></ul><p><strong>例子</strong>：</p><ul><li><code>1, 3 delete</code> ：删除 1~3 ⾏ </li><li><code>., .+4 yank</code> ：复制当前-当前往下 4 ⾏ </li><li><code>$-3, $</code> ：打印⽂件的最后 4 ⾏</li></ul><p><code>%</code> ：特殊的 <code>range</code> ，代表当前⽂件的所有⾏</p><p><code>&#39;&lt;</code> &#x2F; <code>&#39;&gt;</code> ：可视模式中选中范围的开头和结尾（可视模式下直接按 <code>:</code> 可以直接设置）</p><h2 id="4-⾏的复制、移动、粘贴"><a href="#4-⾏的复制、移动、粘贴" class="headerlink" title="4. ⾏的复制、移动、粘贴"></a>4. ⾏的复制、移动、粘贴</h2><ul><li><code>:[range] copy &#123;address&#125;</code> ：把 <code>range</code> 中的⾏复制到 <code>address</code> 后⾯ </li><li><code>:[range] move &#123;address&#125;</code> ：把 <code>range</code> 中的⾏移动到 <code>address</code> 后⾯ </li><li><code>:[address] put [x]</code> ：把寄存器 <code>x</code> 的内容粘贴到 <code>address</code> 后⾯</li></ul><p>0 作为虚拟⾏的 address，可以⽤来将内容插⼊第⼀⾏</p><h2 id="5-Ex-命令"><a href="#5-Ex-命令" class="headerlink" title="5. Ex 命令"></a>5. Ex 命令</h2><p>删除、拷⻉、打印：</p><ul><li><code>:[range] delete [x]</code></li><li><code>:[range] yank [x]</code></li><li><code>:[range] print</code></li></ul><p>复制、移动、粘贴：</p><ul><li><code>:[range] copy &#123;address&#125;</code></li><li><code>:[range] move &#123;address&#125;</code></li><li><code>:[address] put [x]</code></li></ul><p>Ex 命令和 Normal 模式下的编辑操作有区别吗？</p><ul><li>命令模式下的编辑操作以“⾏”为单位 </li><li>命令模式下的编辑操作⽆需移动光标</li></ul><h2 id="6-批量操作：normal-命令"><a href="#6-批量操作：normal-命令" class="headerlink" title="6. 批量操作：normal 命令"></a>6. 批量操作：normal 命令</h2><p>格式： <code>:[range] normal &#123;commands&#125;</code></p><p>含义：<strong>对 <code>range</code> 中的所有⾏执⾏ Normal 模式下的命令 <code>commands</code></strong></p><ul><li>将 <code>range</code> 设置为 <code>%</code> ，可以对整个⽂件的所有⾏执⾏ </li><li><code>:[range] normal .</code> ： 配合 <code>.</code> 命令，效果拔群</li></ul><p>常⽤做法：先做⼀次修改操作，再⽤ normal 命令在指定的⾏上完成操作 </p><ul><li><code>.</code> 命令只能记录⼀次修改，⽤宏可以实现记录多个操作</li></ul><p><code>:[range] noraml @&#123;register&#125;</code><br>常⽤做法：先把想要的操作录制成宏，再⽤ normal 命令在指定的⾏上重放宏</p><h2 id="7-批量操作：global-命令"><a href="#7-批量操作：global-命令" class="headerlink" title="7. 批量操作：global 命令"></a>7. 批量操作：global 命令</h2><p>格式： <code>:[range] global/&#123;pattern&#125;/[cmd]</code></p><p>含义：<strong>对 <code>range</code> 中包含 <code>pattern</code> 的所有⾏执⾏ Command 模式下的 Ex 命令</strong></p><p><code>[cmd]</code> ：Ex 命令，不给的话默认是打印（ <code>print</code> ）</p><p>注意， <code>normal</code> 命令也是 Ex 命令！</p><p><code>:[range] global/&#123;pattern&#125;/normal &#123;commands&#125;</code> ：对 <code>range</code> 中所有带 <code>pattern</code> 的 ⾏，<br>执⾏ Normal 模式下的命令 <code>commands</code></p><p><strong>例⼦：</strong></p><ul><li><code>:% global /TODO/delete</code> ：删除所有带 TODO 的⾏</li></ul><h2 id="8-替换命令"><a href="#8-替换命令" class="headerlink" title="8. 替换命令"></a>8. 替换命令</h2><p><code>:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></p><p>将 <code>pattern</code> 替换为 <code>string</code></p><p><code>flags</code> ：</p><ul><li><code>g</code> ：替换每⼀⾏的所有匹配 </li><li><code>i</code> ：忽视⼤⼩写 </li><li><code>c</code> ：替换前进⾏确认 </li><li><code>n</code> ：计数⽽不是替换</li></ul><p><code>:%s/Vim//gn</code> ：统计⽂件中所有<code>Vim</code> 出现的次数（此时替换为什么⽆所谓，加了 <code>n</code> 就 不会<br>执⾏替换操作）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
